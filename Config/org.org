[[https://orgmode.org/][Org Mode]] is a rich document editor, project planner, task and time tracker, blogging engine, literate coding utility and more.

I use it to create structured dynamic documentation and export it to beautiful LaTex produced PDFs, as task manager, and as with this current file, as a documented configuration maker. Sometimes even as a basic spreadsheet. It's a thing of beauty.

* File Extension Association

Adding some file extensions so that I can share with non emacs users and still enjoy the magic of Org when using Emacs

From [[https://www.gnu.org/software/emacs/manual/html_node/efaq/Associating-modes-with-files.html][here]], there is a nice alternative!

Add ~-*- org -*-~ to the (sans the tildes) to the first line of any file you want to have treated with that mode.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
#+end_src

* Sections customizations

The following changes font symbols used by Org mode for sections and such things.

#+begin_src emacs-lisp
  (defun aw/org-font-setup ()
  ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "⁃")))))))
  (use-package org
    :hook (org-mode . aw/org-mode-setup)
    :config
    (setq org-ellipsis "▾"))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("⚫" "⚪" "●" "○" "●" "○" "●")))

  (aw/org-font-setup)
#+end_src

The following changes indention in sections, word wrapping and centering of document area in the editor, all just for visual pleasure, doesn't affect exports.
#+begin_src emacs-lisp
  (defun aw/org-mode-setup ()
    (org-indent-mode) ;; Sections are indented by hierarchy
    (variable-pitch-mode 0) ;;
    (visual-line-mode 1)) ;; Word wrapping on and navigate accordingly

  ;; Nice visual word wrapping
  (defun aw/org-mode-visual-fill ()
    (setq visual-fill-column-width 105
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  ;;Centers document within the editor 
  (use-package visual-fill-column
    :hook (org-mode . aw/org-mode-visual-fill))
#+end_src

* Agenda and the like

This block configures agenda and related functionality. I still don't know a lot of how to use this efficiently, so it is WIP.

#+begin_src emacs-lisp

  (setq org-agenda-files (list "~/Emacs/Org/Agenda/Home.txt"
                          "~/Emacs/Org/Agenda/Learn.txt"
                          "~/Emacs/Org/Agenda/RootWurks.txt"
                          "~/Emacs/Org/Agenda/TlaliYoltok.Campestre.txt"
                          "~/Emacs/Org/Agenda/TlaliYoltok.SPR.txt"
                          "~/Emacs/Org/Agenda/TlaliYoltok.SanGeronimo.txt"))

#+end_src

* LaTex

Customizing Org-LaTex to my satisfaction.

At the moment I place a number of headers and other config in ~~/Emacs/Org/Config/LaTex.org~ which I include from ~.org~ files which I plan to export to LaTex. Some other config that I have not yet figured out how to place in the file are /tangled/ from here. I'm still not fully decided if I should have one single place for all the config and which one it would be and don't even know if it's fully possible. So the current state of things is, a bit here and a lot in the include file.

#+begin_src emacs-lisp
;; Org latex export customizations
(setq org-latex-toc-command "\\tableofcontents \\clearpage")
(setq org-export-preserve-breaks 1)
#+end_src

* Diagrams with Plantuml

#+begin_src emacs-lisp
  (use-package plantuml-mode
  :config
  (setq org-plantuml-jar-path (expand-file-name "/Users/aw/Java/plantuml/plantuml.jar")))
#+end_src

* Babel Languages

To execute or export code in ~org-mode~ code blocks, to set up ~org-babel-load-languages~. [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][This page]] documents all supported languages.

#+begin_src emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (lisp . t)
      (js . t)
      (latex . t)
      (sql . t)
      (java . t)
      (calc . t)
      (plantuml . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

* Structure templates

Allow creating structure templates easily by typing, for example, ~<el TAB~ to create an ~emacs-lisp~ src block.

#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh"  . "src shell"))
  (add-to-list 'org-structure-template-alist '("el"  . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("cl"  . "src lisp"))
  (add-to-list 'org-structure-template-alist '("js"  . "src js"))
  (add-to-list 'org-structure-template-alist '("uml" . "src plantuml"))
  (add-to-list 'org-structure-template-alist '("xml" . "src xml"))
  (add-to-list 'org-structure-template-alist '("sql" . "src sql"))
  (add-to-list 'org-structure-template-alist '("quote" . "src quote"))
#+end_src

* Spelling

#+begin_src emacs-lisp
  (dolist (hook '(org-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))

  ;; To disable flyspell from some modes use something like
  ;; (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  ;;   (add-hook hook (lambda () (flyspell-mode -1))))

  ;; If i ever want to use righ click (two finger click on mac)
   (eval-after-load "flyspell"
    '(progn
       (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
         (define-key flyspell-mouse-map [mouse-3] #'undefined)))

#+end_src
