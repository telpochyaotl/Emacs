Emacs configuration related to all kinds of Development activities are contained here.

* General development oriented config

#+begin_src emacs-lisp
  ;; Number on columns when it makes sense
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Paring delimiters (by colors and status line)
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  ;; Allow common project editor configuration (~.editorconfig~)
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))

  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))

  (use-package yaml-mode
    :ensure t)

  ;; not sure it is working
  (use-package diff-ansi
    :ensure t
    :commands (diff-ansi-mode diff-ansi-buffer))

  ;; not being installed
  (use-package vdiff
    :commands vdiff
    :ensure t)

  ;; get env vars from shell
  ;; If this fails next time, may need to find a way to
  ;; (when (daemonp)
  ;; (exec-path-from-shell-initialize))
  ;; from inside use-package (need to learn morea about use-package :/ 
  (use-package exec-path-from-shell
    :commands (exec-path-from-shell)
    :ensure t)
#+end_src

* Completion
Trying [[https://company-mode.github.io/][company mode]] for auto-completion

TODO: Start it automatically in several modes?

#+begin_src emacs-lisp
  (use-package company
    :ensure t)
#+end_src

* Js Specific config

- TODO: Configure Flycheck to work with local eslint (i had it before!)

#+begin_src emacs-lisp
  (setq js-indent-level 2) ;; 2 spece indentation
  (use-package add-node-modules-path ;; use node_modules for sources
    :ensure t
    :config
    :after (js-mode)
    :hook ((js-mode-hook . add-node-modules-path)))
#+end_src

* Vue Specific config

Vue is supported via [[LSP Mode]]
- [[https://emacs-lsp.github.io/lsp-mode/page/lsp-volar/][Vue 3 Server]]

* PlantUml Specific config
#+begin_src emacs-lisp
(setq plantuml-indent-level 2) ;; 2 spece indentation
#+end_src
* Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.

#+begin_src emacs-lisp
  ;; Git based Project Management
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-x p" . projectile-command-map)
    :init
    (setq projectile-project-search-path '("~/Development.local/Clients/Alchemy/git" "~/Development.local/Clients/Alchemy/Zosi/git/zosi" "~/Development.local/Clients/Alchemy/ContentBuilder/git/ContentBuilder" "~/Development.local/Clients/Alchemy/Manager/git/manager"))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src
* Git

- [[https://magit.vc/][Magit]] is an awesome UI for git operations.
- [[https://magit.vc/manual/ghub/index.html#SEC_Contents][Forge]] is a package that enhances Magit to deal with GitHub operations.

#+begin_src emacs-lisp

  ;; Git via Magit!
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package forge
    :init
    (setq auth-sources '("~/.authinfo")))

#+end_src

* LSP Mode

This originally came from [[https://emacs-lsp.github.io/lsp-mode/page/installation/#use-package][lsp installation page]]

#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (XXX-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
;; if you are helm user
(use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
(use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language

;; optional if you want which-key integration
(use-package which-key
    :config
    (which-key-mode))
#+end_src

* Typescript

I was thinking on setting up LSP, and I might, but it didn't work out ouf the box as I expected. Then found [[https://github.com/ananthakumaran/tide][tide]] and for now this might be it.

- [[https://github.com/ananthakumaran/tide][Tide]]
#+begin_src emacs-lisp
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (setq tide-completion-enable-autoimport-suggestions t)
    ;;    (setq tide-format-options '(:indentSize 2 :tabSize 2 :insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  (use-package tide
    :ensure t
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (typescript-mode . company-mode)
           ;; (before-save . tide-format-before-save)
           )
    :bind (("C-c f" . tide-fix)
    ("C-c d" . tide-documentation-at-point)))
#+end_src


* File Extension Association

Adding some file extensions I make up that I want emacs to treat in certain ways

Found how [[https://www.gnu.org/software/emacs/manual/html_node/efaq/Associating-modes-with-files.html][here]].

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.userData\\'" . sh-mode))
#+end_src

